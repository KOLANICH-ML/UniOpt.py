#image: pypy:latest
image: registry.gitlab.com/kolanich/fixed_python:latest

stages:
  - dependencies
  - build
  - test
  - tooling

variables:
  GIT_DEPTH: "1"
  PYTHONUSERBASE: ${CI_PROJECT_DIR}/python_user_packages

dependencies:
  tags:
    - shared
  stage: dependencies
  before_script:
    - export PYTHON_MODULES_DIR=${PYTHONUSERBASE}/lib/python3.7/site-packages
    - export EXECUTABLE_DEPENDENCIES_DIR=${PYTHONUSERBASE}/bin
    - export PATH="$PATH:$EXECUTABLE_DEPENDENCIES_DIR" # don't move into `variables` any of them, it is unordered
    #- python -c "import hyperband"
  script:
    - mkdir -p $EXECUTABLE_DEPENDENCIES_DIR $PYTHON_MODULES_DIR
    - source ./.ci/installBackendsDependencies.sh

  cache:
    key: deps
    paths:
      - $PYTHONUSERBASE
      - $EXECUTABLE_DEPENDENCIES_DIR

build:
  tags:
    - shared
  stage: build

  before_script:
    - export PYTHON_MODULES_DIR=${PYTHONUSERBASE}/lib/python3.7
    - export EXECUTABLE_DEPENDENCIES_DIR=${PYTHONUSERBASE}/bin
    - export PATH="$PATH:$EXECUTABLE_DEPENDENCIES_DIR" # don't move into `variables` any of them, it is unordered
    - source ./.ci/installBackendsDependencies.sh # everything should be built at this moment, needed only to install the stuff installed by apt-get

  script:
    - python3 setup.py bdist_wheel
    - mv ./dist/*.whl ./dist/UniOpt-0.CI-py3-none-any.whl
    - pip3 install --user --upgrade --pre -e ./[hyperopt,hyperengine,SKOpt,SMAC,BeeColony,optunity,Yabox,PySHAC,RBFOpt,Bayessian,GPyOpt,SOpt,pySOT,BayTune,RoBo] #https://github.com/pypa/pip/issues/5903
    - coverage run --source=UniOpt -m pytest --junitxml=./rspec.xml ./tests/tests.py
    - coverage report -m
    - coverage xml
  cache:
    key: deps
    paths:
      - $PYTHONUSERBASE

  artifacts:
    paths:
      - dist
    reports:
      junit: ./rspec.xml
      cobertura: ./coverage.xml

checks:
  stage: tooling
  tags:
    - shared
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:dind
  script:
    - docker run --env SAST_CONFIDENCE_LEVEL=5 --volume "$PWD:/code" --volume /var/run/docker.sock:/var/run/docker.sock "registry.gitlab.com/gitlab-org/security-products/sast:latest" /app/bin/run /code
    #- docker run --env SOURCE_CODE="$PWD" --env CODECLIMATE_VERSION="latest" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock "registry.gitlab.com/gitlab-org/security-products/codequality:latest" /code
    #- docker run --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}" --volume "$PWD:/code" --volume /var/run/docker.sock:/var/run/docker.sock "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:latest" /code

  artifacts:
    reports:
      #codequality: gl-code-quality-report.json
      sast: gl-sast-report.json
      #dependency_scanning: gl-dependency-scanning-report.json 


pages:
  stage: tooling
  tags:
    - shared
  image: alpine:latest
  allow_failure: true
  before_script:
    - apk update
    - apk add doxygen
    - apk add ttf-freefont graphviz
  script:
    - doxygen ./Doxyfile
    - mv ./docs/html ./public
  artifacts:
    paths:
      - public
  only:
    - master
